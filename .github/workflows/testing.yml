name: Test OpenRouterPS Module

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:

jobs:
  unit-tests:
    name: Unit Tests
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        
    steps:
      - uses: actions/checkout@v3
      
      - name: Install Pester
        shell: pwsh
        run: |
          Install-Module -Name Pester -Force -SkipPublisherCheck
      
      - name: Run Unit Tests
        shell: pwsh
        run: |
          Import-Module ./OpenRouterPS.psm1
          Invoke-Pester ./tests/Unit -Output Detailed
  
  integration-tests:
    name: Integration Tests
    needs: unit-tests
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        
    steps:
      - uses: actions/checkout@v3
      
      - name: Install Pester
        shell: pwsh
        run: |
          Install-Module -Name Pester -Force -SkipPublisherCheck
      
      - name: Run Integration Tests
        shell: pwsh
        env:
          OPENROUTER_API_KEY: ${{ secrets.OPENROUTER_API_KEY }}
        run: |
          Import-Module ./OpenRouterPS.psm1
          Invoke-Pester ./tests/Integration -Output Detailed

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    
    steps:
      - uses: actions/checkout@v3
      
      - name: Install PSScriptAnalyzer
        shell: pwsh
        run: |
          Install-Module -Name PSScriptAnalyzer -Force -SkipPublisherCheck
      
      - name: Run PSScriptAnalyzer
        shell: pwsh
        run: |
          $results = Invoke-ScriptAnalyzer -Path . -Recurse -Settings PSGallery
          $results | Format-Table -AutoSize
          
          # Fail if any error-level findings
          if ($results.Where({$_.Severity -eq 'Error'}).Count -gt 0) {
            throw "PSScriptAnalyzer found errors in the code."
          }
